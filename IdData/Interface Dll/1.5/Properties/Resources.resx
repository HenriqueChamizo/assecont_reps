<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RETURN_0" xml:space="preserve">
    <value>Função executada com sucesso</value>
  </data>
  <data name="RETURN_1" xml:space="preserve">
    <value>Função executada com sucesso e não há registros a serem lidos</value>
  </data>
  <data name="RETURN_2" xml:space="preserve">
    <value>Função executada com sucesso e chamar a função GetLogType2 para obtenção dos dados</value>
  </data>
  <data name="RETURN_3" xml:space="preserve">
    <value>Função executada com sucesso e chamar a função GetLogType3 para obtenção dos dados</value>
  </data>
  <data name="RETURN_4" xml:space="preserve">
    <value>Função executada com sucesso e chamar a função GetLogType4 para obtenção dos dados</value>
  </data>
  <data name="RETURN_5" xml:space="preserve">
    <value>Função executada com sucesso e chamar a função GetLogType5 para obtenção dos dados</value>
  </data>
  <data name="RETURN_NEG_1" xml:space="preserve">
    <value>Cartão de Proximidade já cadastrado para outro usuário.</value>
  </data>
  <data name="RETURN_NEG_10" xml:space="preserve">
    <value>Trabalhador não cadastrado.</value>
  </data>
  <data name="RETURN_NEG_100" xml:space="preserve">
    <value>Erro no checksum do cabeçalho do pacote.</value>
  </data>
  <data name="RETURN_NEG_101" xml:space="preserve">
    <value>Erro no checksum dos dados do pacote.</value>
  </data>
  <data name="RETURN_NEG_102" xml:space="preserve">
    <value>Comando inválido.</value>
  </data>
  <data name="RETURN_NEG_103" xml:space="preserve">
    <value>Pacote inválido. Dados do buffer são inválidos.</value>
  </data>
  <data name="RETURN_NEG_104" xml:space="preserve">
    <value>Erro no tamanho do pacote: pacote vazio.</value>
  </data>
  <data name="RETURN_NEG_105" xml:space="preserve">
    <value>Erro no tamanho dos dados.</value>
  </data>
  <data name="RETURN_NEG_11" xml:space="preserve">
    <value>ID REP não possui o cadastro do empregador.</value>
  </data>
  <data name="RETURN_NEG_12" xml:space="preserve">
    <value>Dados do empregador inválidos: CPF / CNPJ.</value>
  </data>
  <data name="RETURN_NEG_13" xml:space="preserve">
    <value>Dados do empregador inválidos: Nome / Razão Social.</value>
  </data>
  <data name="RETURN_NEG_14" xml:space="preserve">
    <value>Dados do empregador inválidos: Endereço.</value>
  </data>
  <data name="RETURN_NEG_15" xml:space="preserve">
    <value>Data e/ou hora inválida(s).</value>
  </data>
  <data name="RETURN_NEG_16" xml:space="preserve">
    <value>Erro no módulo biométrico: ERRO DE ESCRITA.</value>
  </data>
  <data name="RETURN_NEG_17" xml:space="preserve">
    <value>Erro na escrita do módulo biométrico: TIMEOUT.</value>
  </data>
  <data name="RETURN_NEG_18" xml:space="preserve">
    <value>Dados de comunicação inválidos: Endereço IP.</value>
  </data>
  <data name="RETURN_NEG_19" xml:space="preserve">
    <value>Dados de comunicação inválidos: Máscara de sub-rede.</value>
  </data>
  <data name="RETURN_NEG_2" xml:space="preserve">
    <value>Cartão de Código de Barras já cadastrado para outro usuário.</value>
  </data>
  <data name="RETURN_NEG_20" xml:space="preserve">
    <value>Dados de comunicação inválidos: IP Gateway.</value>
  </data>
  <data name="RETURN_NEG_200" xml:space="preserve">
    <value>Erro ao abrir o arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_201" xml:space="preserve">
    <value>Erro ao criar o arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_202" xml:space="preserve">
    <value>Erro ao ler o arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_203" xml:space="preserve">
    <value>Erro de checksum dos dados do arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_204" xml:space="preserve">
    <value>Erro ao abrir o AFD</value>
  </data>
  <data name="RETURN_NEG_205" xml:space="preserve">
    <value>Erro ao ler o AFD</value>
  </data>
  <data name="RETURN_NEG_206" xml:space="preserve">
    <value>Erro ao fechar o AFD</value>
  </data>
  <data name="RETURN_NEG_207" xml:space="preserve">
    <value>Erro ao manipular o AFD</value>
  </data>
  <data name="RETURN_NEG_208" xml:space="preserve">
    <value>Erro ao fechar o arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_209" xml:space="preserve">
    <value>Cabeçalho do arquivo .ubs inválido</value>
  </data>
  <data name="RETURN_NEG_21" xml:space="preserve">
    <value>Não existem eventos.</value>
  </data>
  <data name="RETURN_NEG_210" xml:space="preserve">
    <value>Erro ao escrever no arquivo .ubs</value>
  </data>
  <data name="RETURN_NEG_22" xml:space="preserve">
    <value>Módulo biométrico cheio.</value>
  </data>
  <data name="RETURN_NEG_23" xml:space="preserve">
    <value>Erro no módulo biométrico: ERRO DE LEITURA.</value>
  </data>
  <data name="RETURN_NEG_24" xml:space="preserve">
    <value>Erro na leitura do módulo biométrico: TIMEOUT.</value>
  </data>
  <data name="RETURN_NEG_25" xml:space="preserve">
    <value>Erro de checksum da área de dados.</value>
  </data>
  <data name="RETURN_NEG_26" xml:space="preserve">
    <value>Dados do empregador inválidos: CEI.</value>
  </data>
  <data name="RETURN_NEG_27" xml:space="preserve">
    <value>Equipamento bloqueado.</value>
  </data>
  <data name="RETURN_NEG_28" xml:space="preserve">
    <value>Código do alarme inválido.</value>
  </data>
  <data name="RETURN_NEG_29" xml:space="preserve">
    <value>Código do produto inválido.</value>
  </data>
  <data name="RETURN_NEG_3" xml:space="preserve">
    <value>PIS já cadastrado para outro usuário.</value>
  </data>
  <data name="RETURN_NEG_30" xml:space="preserve">
    <value>Endereços da comunicação Serial inválidos.</value>
  </data>
  <data name="RETURN_NEG_31" xml:space="preserve">
    <value>Nível de segurança do módulo biométrico inválido.</value>
  </data>
  <data name="RETURN_NEG_4" xml:space="preserve">
    <value>Código de acesso via teclado já cadastrado para outro usuário.</value>
  </data>
  <data name="RETURN_NEG_5" xml:space="preserve">
    <value>Erro na memória MRP.</value>
  </data>
  <data name="RETURN_NEG_6" xml:space="preserve">
    <value>Erro na memória MT.</value>
  </data>
  <data name="RETURN_NEG_7" xml:space="preserve">
    <value>Erro na memória RAM.</value>
  </data>
  <data name="RETURN_NEG_8" xml:space="preserve">
    <value>Dados enviados inválidos.</value>
  </data>
  <data name="RETURN_NEG_9" xml:space="preserve">
    <value>ID REP não possui trabalhadores cadastrados.</value>
  </data>
  <data name="RETURN_UNKNOW" xml:space="preserve">
    <value>Erro desconhecido</value>
  </data>
</root>